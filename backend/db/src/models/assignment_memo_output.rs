use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use sea_orm::EntityTrait;
/// Represents the output generated by the interpreter for an assignment memo.
///
/// Each output is linked to a specific assignment and task.
/// Timestamps are included to track when the file was created and last updated.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "assignment_memo_outputs")]
pub struct Model {
    /// Primary key of the output.
    #[sea_orm(primary_key)]
    pub id: i64,
    /// ID of the related assignment.
    pub assignment_id: i64,
    /// ID of the related task.
    pub task_id: i64,
    /// Relative file path from the storage root.
    pub path: String,
    /// Timestamp when the output was created.
    pub created_at: DateTime<Utc>,
    /// Timestamp when the output was last updated.
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    /// Link to the related assignment.
    #[sea_orm(
        belongs_to = "super::assignment::Entity",
        from = "Column::AssignmentId",
        to = "super::assignment::Column::Id"
    )]
    Assignment,

    /// Link to the related task.
    #[sea_orm(
        belongs_to = "super::assignment_task::Entity",
        from = "Column::TaskId",
        to = "super::assignment_task::Column::Id"
    )]
    AssignmentTask,
}

impl ActiveModelBehavior for ActiveModel {}
impl Model {}