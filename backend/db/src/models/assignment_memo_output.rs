use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use sea_orm::{ActiveValue::Set, DatabaseConnection, EntityTrait};
use std::env;
use std::fs;
use std::path::PathBuf;

/// Represents the output generated by the interpreter for an assignment memo.
///
/// Each output is linked to a specific assignment and task.
/// Timestamps are included to track when the file was created and last updated.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "assignment_memo_outputs")]
pub struct Model {
    /// Primary key of the output.
    #[sea_orm(primary_key)]
    pub id: i64,
    /// ID of the related assignment.
    pub assignment_id: i64,
    /// ID of the related task.
    pub task_id: i64,
    /// Relative file path from the storage root.
    pub path: String,
    /// Timestamp when the output was created.
    pub created_at: DateTime<Utc>,
    /// Timestamp when the output was last updated.
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    /// Link to the related assignment.
    #[sea_orm(
        belongs_to = "super::assignment::Entity",
        from = "Column::AssignmentId",
        to = "super::assignment::Column::Id"
    )]
    Assignment,

    /// Link to the related task.
    #[sea_orm(
        belongs_to = "super::assignment_task::Entity",
        from = "Column::TaskId",
        to = "super::assignment_task::Column::Id"
    )]
    AssignmentTask,
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    /// Returns the root directory used for storing assignment submissions on disk.
    ///
    /// # Returns
    /// - `PathBuf` pointing to the base directory.
    ///
    /// Uses the `ASSIGNMENT_STORAGE_ROOT` environment variable if set,
    /// otherwise defaults to `data/assignment_files`.
    pub fn storage_root() -> PathBuf {
        let relative_root = env::var("ASSIGNMENT_STORAGE_ROOT")
            .unwrap_or_else(|_| "data/assignment_files".to_string());
        
        let project_root = env::current_dir().expect("Failed to get current dir");
        
        project_root.join(relative_root)
    }

    /// Constructs the full directory path for a memo output based on
    /// its assignment and task identifiers.
    pub fn full_directory_path(module_id: i64, assignment_id: i64) -> PathBuf {
        Self::storage_root()
            .join(format!("module_{module_id}"))
            .join(format!("assignment_{assignment_id}"))
            .join(format!("memo_output"))
    }

    /// Computes the absolute path to the stored output file on disk.
    pub fn full_path(&self) -> PathBuf {
        Self::storage_root().join(&self.path)
    }

    /// Saves a memo output file to disk and creates or updates its metadata in the database.
    pub async fn save_file(
        db: &DatabaseConnection,
        assignment_id: i64,
        task_id: i64,
        filename: &str,
        bytes: &[u8],
    ) -> Result<Self, DbErr> {
        let now = Utc::now();

        let partial = ActiveModel {
            assignment_id: Set(assignment_id),
            task_id: Set(task_id),
            path: Set("".to_string()),
            created_at: Set(now),
            updated_at: Set(now),
            ..Default::default()
        };

        let inserted: Model = partial.insert(db).await?;

        let ext = PathBuf::from(filename)
            .extension()
            .map(|e| e.to_string_lossy().to_string());

        let stored_filename = match ext {
            Some(ext) => format!("{}.{}", inserted.id, ext),
            None => inserted.id.to_string(),
        };

        //Get assignment
        let assignment = super::assignment::Entity::find_by_id(assignment_id)
            .one(db)
            .await
            .map_err(|e| DbErr::Custom(format!("DB error finding assignment: {}", e)))?
            .ok_or_else(|| DbErr::Custom("Assignment not found".to_string()))?;

        let module_id = assignment.module_id;

        let dir_path = Self::full_directory_path(module_id, assignment_id);
        fs::create_dir_all(&dir_path)
            .map_err(|e| DbErr::Custom(format!("Failed to create directory: {e}")))?;

        let file_path = dir_path.join(&stored_filename);
        let relative_path = file_path
            .strip_prefix(Self::storage_root())
            .unwrap()
            .to_string_lossy()
            .to_string();

        fs::write(&file_path, bytes)
            .map_err(|e| DbErr::Custom(format!("Failed to write file: {e}")))?;

        let mut model: ActiveModel = inserted.into();
        model.path = Set(relative_path);
        model.updated_at = Set(Utc::now());

        model.update(db).await
    }

    /// Reads the contents of a memo output file from disk,
    /// given the module_id, assignment_id, and the file id (filename).
    pub fn read_memo_output_file(
        module_id: i64,
        assignment_id: i64,
        file_id: i64,
    ) -> Result<Vec<u8>, std::io::Error> {
        let storage_root = Self::storage_root();

        let dir_path = storage_root
            .join(format!("module_{module_id}"))
            .join(format!("assignment_{assignment_id}"))
            .join("memo_output");

        let file_path = dir_path.join(file_id.to_string());

        std::fs::read(file_path)
    }
}