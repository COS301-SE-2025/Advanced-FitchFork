use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use sea_orm::{ActiveValue::Set, DatabaseConnection, EntityTrait};
use std::fs;
use std::io::ErrorKind;
use std::path::PathBuf;
use std::{env, io};

use crate::models::assignment_submission;

/// Represents the output generated by a student's submission for an assignment task.
///
/// Each output is linked to a specific assignment, task, and submitting user.
/// Timestamps are included to track when the file was created and last updated.
#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "assignment_submission_outputs")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub task_id: i64,
    pub submission_id: i64,
    pub path: String,
    pub created_at: DateTime<Utc>,
    pub updated_at: DateTime<Utc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::assignment_task::Entity",
        from = "Column::TaskId",
        to = "super::assignment_task::Column::Id"
    )]
    AssignmentTask,

    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::SubmissionId",
        to = "super::user::Column::Id"
    )]
    AssignmentSubmission,
}

impl ActiveModelBehavior for ActiveModel {}

impl Model {
    pub fn storage_root() -> PathBuf {
        let relative_root = env::var("ASSIGNMENT_STORAGE_ROOT")
            .unwrap_or_else(|_| "data/assignment_files".to_string());

        let mut dir = std::env::current_dir().expect("Failed to get current dir");

        while let Some(parent) = dir.parent() {
            if dir.ends_with("backend") {
                return dir.join(relative_root);
            }
            dir = parent.to_path_buf();
        }

        PathBuf::from(relative_root)
    }
    pub fn full_directory_path(
        module_id: i64,
        assignment_id: i64,
        user_id: i64,
        attempt_number: i64,
        task_number: i64,
    ) -> PathBuf {
        Self::storage_root()
            .join(format!("module_{module_id}"))
            .join(format!("assignment_{assignment_id}"))
            .join("assignment_submissions")
            .join(format!("user_{user_id}"))
            .join(format!("attempt_{attempt_number}"))
            .join("submission_output")
            .join(format!("task_{task_number}"))
    }

    pub fn full_path(&self) -> PathBuf {
        Self::storage_root().join(&self.path)
    }

    pub async fn save_file(
        db: &DatabaseConnection,
        task_id: i64,
        submission_id: i64,
        filename: &str,
        bytes: &[u8],
    ) -> Result<Self, DbErr> {
        let now = Utc::now();

        let partial = ActiveModel {
            task_id: Set(task_id),
            submission_id: Set(submission_id),
            path: Set("".to_string()),
            created_at: Set(now),
            updated_at: Set(now),
            ..Default::default()
        };

        let inserted: Model = partial.insert(db).await?;

        let ext = PathBuf::from(filename)
            .extension()
            .map(|e| e.to_string_lossy().to_string());

        let stored_filename = match ext {
            Some(ext) => format!("{}.{}", inserted.id, ext),
            None => inserted.id.to_string(),
        };

        // Get submission
        let submission = super::assignment_submission::Entity::find_by_id(submission_id)
            .one(db)
            .await
            .map_err(|e| DbErr::Custom(format!("DB error finding submission: {}", e)))?
            .ok_or_else(|| DbErr::Custom("Submission not found".to_string()))?;

        let assignment = super::assignment::Entity::find_by_id(submission.assignment_id)
            .one(db)
            .await
            .map_err(|e| DbErr::Custom(format!("DB error finding assignment: {}", e)))?
            .ok_or_else(|| DbErr::Custom("Assignment not found".to_string()))?;

        let task = super::assignment_task::Entity::find_by_id(task_id)
            .one(db)
            .await
            .map_err(|e| DbErr::Custom(format!("DB error finding task: {}", e)))?
            .ok_or_else(|| DbErr::Custom("Task not found".to_string()))?;

        let dir_path = Self::full_directory_path(
            assignment.module_id,
            assignment.id,
            submission.user_id,
            submission.attempt,
            task.task_number,
        );
        fs::create_dir_all(&dir_path)
            .map_err(|e| DbErr::Custom(format!("Failed to create directory: {e}")))?;

        let file_path = dir_path.join(&stored_filename);
        let relative_path = file_path
            .strip_prefix(Self::storage_root())
            .unwrap()
            .to_string_lossy()
            .to_string();

        fs::write(&file_path, bytes)
            .map_err(|e| DbErr::Custom(format!("Failed to write file: {e}")))?;

        let mut model: ActiveModel = inserted.into();
        model.path = Set(relative_path);
        model.updated_at = Set(Utc::now());

        model.update(db).await
    }

    /// Reads the contents of a submission output file from disk,
    /// given the module_id, assignment_id, user_id, submission_id
    pub async fn get_output(
        db: &DatabaseConnection,
        module_id: i64,
        assignment_id: i64,
        submission_id: i64,
    ) -> io::Result<Vec<(i64, String)>> {
        let submission = assignment_submission::Entity::find_by_id(submission_id).one(db).await
            .map_err(|e| io::Error::new(ErrorKind::Other, format!("DB error: {}", e)))?
            .ok_or_else(|| io::Error::new(ErrorKind::NotFound, "Submission not found"))?;

        let base_dir_path = Self::storage_root()
            .join(format!("module_{module_id}"))
            .join(format!("assignment_{assignment_id}"))
            .join("assignment_submissions")
            .join(format!("user_{}", submission.user_id))
            .join(format!("attempt_{}", submission.attempt))
            .join("submission_output");

        if !base_dir_path.exists() {
            return Err(io::Error::new(
                ErrorKind::NotFound,
                format!("Submission output directory {:?} does not exist", base_dir_path),
            ));
        }

        let mut results = Vec::new();
        for entry in fs::read_dir(&base_dir_path)? {
            let entry = entry?;
            if entry.file_type()?.is_dir() {
                let dir_name = entry.file_name().to_string_lossy().to_string();
                if let Some(task_num_str) = dir_name.strip_prefix("task_") {
                    if let Ok(task_number) = task_num_str.parse::<i64>() {
                        let task_dir = entry.path();
                        for file_entry in fs::read_dir(task_dir)? {
                            let file_entry = file_entry?;
                            if file_entry.file_type()?.is_file() {
                                let file_path = file_entry.path();
                                let content = fs::read_to_string(&file_path)?;
                                results.push((task_number, content));
                            }
                        }
                    }
                }
            }
        }

        Ok(results)
    }
}