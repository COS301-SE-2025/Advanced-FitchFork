name: "Start servers (API, Code Manager, Frontend)"
description: "Build Docker images, then start required servers in background, wait for health URLs, and expose logs"

inputs:
  start-api:
    description: "Whether to start API (true/false)"
    required: false
    default: "true"
  start-code:
    description: "Whether to start Code Manager (true/false)"
    required: false
    default: "true"
  start-frontend:
    description: "Whether to start frontend (true/false)"
    required: false
    default: "false"
  api-cmd:
    description: "Command to start API"
    required: false
    default: "cargo run -p api"
  code-cmd:
    description: "Command to start Code Manager"
    required: false
    default: "cargo run -p code_manager"
  frontend-cmd:
    description: "Command to start Frontend"
    required: false
    default: "npm run dev -- --port 5173"
  api-url:
    description: "API health URL"
    required: false
    default: "http://localhost:3000/api/health"
  code-url:
    description: "Code Manager health URL"
    required: false
    default: "http://localhost:5000/health"
  frontend-url:
    description: "Frontend URL to wait for"
    required: false
    default: "http://localhost:5173"

runs:
  using: "composite"
  steps:
    - name: Install wait-on
      shell: bash
      run: npm i -g wait-on

    - name: Load backend .env
      shell: bash
      run: |
        set -a
        source backend/.env
        set +a

    - name: Build Docker images
      shell: bash
      run: docker build -t universal-runner:latest -f images/Dockerfile .
      working-directory: backend/code_manager

    - name: Start API
      if: ${{ inputs.start-api == 'true' }}
      shell: bash
      working-directory: backend
      run: |
        nohup ${INPUT_API_CMD} > ../api.log 2>&1 & echo $! > ../api.pid
      env:
        INPUT_API_CMD: ${{ inputs.api-cmd }}

    - name: Start Code Manager
      if: ${{ inputs.start-code == 'true' }}
      shell: bash
      working-directory: backend
      run: |
        nohup ${INPUT_CODE_CMD} > ../code.log 2>&1 & echo $! > ../code.pid
      env:
        INPUT_CODE_CMD: ${{ inputs.code-cmd }}

    - name: Start Frontend
      if: ${{ inputs.start-frontend == 'true' }}
      shell: bash
      working-directory: frontend
      run: |
        nohup ${INPUT_FRONTEND_CMD} > ../frontend.log 2>&1 & echo $! > ../frontend.pid
      env:
        INPUT_FRONTEND_CMD: ${{ inputs.frontend-cmd }}

    - name: Wait for API
      if: ${{ inputs.start-api == 'true' }}
      shell: bash
      run: |
        echo "Waiting for API at ${API_URL}"
        head -n 40 api.log || true
        if ! wait-on -t 120000 "${API_URL}"; then
          echo "❌ API did not become healthy"
          tail -n 200 api.log || true
          exit 1
        fi
      env:
        API_URL: ${{ inputs.api-url }}

    - name: Wait for Code Manager
      if: ${{ inputs.start-code == 'true' }}
      shell: bash
      run: |
        echo "Waiting for Code Manager at ${CODE_URL}"
        head -n 40 code.log || true
        if ! wait-on -t 120000 "${CODE_URL}"; then
          echo "❌ Code Manager did not become healthy"
          tail -n 200 code.log || true
          exit 1
        fi
      env:
        CODE_URL: ${{ inputs.code-url }}

    - name: Wait for Frontend
      if: ${{ inputs.start-frontend == 'true' }}
      shell: bash
      run: |
        echo "Waiting for Frontend at ${FRONTEND_URL}"
        head -n 40 frontend.log || true
        if ! wait-on -t 120000 "${FRONTEND_URL}"; then
          echo "❌ Frontend did not become healthy"
          tail -n 200 frontend.log || true
          exit 1
        fi
      env:
        FRONTEND_URL: ${{ inputs.frontend-url }}

    - name: Expose logs path
      id: logs
      shell: bash
      run: echo "logs-path=$GITHUB_WORKSPACE" >> "$GITHUB_OUTPUT"

    - name: Register post-job cleanup
      shell: bash
      run: |
        cat > /tmp/stop_servers.sh <<'EOS'
        set -e
        for f in api.pid code.pid frontend.pid; do
          if [ -f "$f" ]; then
            kill "$(cat "$f")" 2>/dev/null || true
          fi
        done
        EOS
        chmod +x /tmp/stop_servers.sh